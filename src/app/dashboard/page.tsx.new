// app/dashboard/page.tsx
"use client"

import React, { useState, useEffect } from "react";
import { useUser } from "@/contexts/UserContext";
import { MainLayout } from "@/components/main-layout";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { toast } from "@/components/ui/use-toast";

// Import our modular components
import { 
  IdeaList, 
  IdeaDetails, 
  IdeaDialog, 
  PostList, 
  PostDialog 
} from "@/components/dashboard";

// Types 
interface Idea {
  id: string;
  title: string;
  description: string;
  creator_id: string;
  is_public: boolean;
  is_published: boolean;
  published_at?: string;
  status: string;
  upvotes: number;
  created_at: string;
  updated_at: string;
  tags?: string[] | string;
  assignments?: any[];
  users?: {
    display_name: string;
    avatar_url?: string;
  };
}

interface Post {
  id: string;
  title: string;
  content: string;
  description?: string;
  creator_id: string;
  is_public?: boolean;
  upvotes: number;
  downvotes: number;
  comments_count: number;
  created_at: string;
  updated_at: string;
  creator?: {
    display_name: string;
    avatar_url?: string;
  };
  tags?: string[];
}

interface Checklist {
  id: string;
  title: string;
  progress: number;
  checklist_items: {
    id: string;
    text: string;
    completed: boolean;
    completed_by?: string;
    completed_at?: string;
  }[];
  is_shared: boolean;
  owner?: {
    display_name: string;
    avatar_url: string;
  };
}

const DashboardPage = () => {
  // State for ideas 
  const [myIdeas, setMyIdeas] = useState<Idea[]>([]);
  const [collaboratedIdeas, setCollaboratedIdeas] = useState<Idea[]>([]);
  const [myPicksIdeas, setMyPicksIdeas] = useState<Idea[]>([]);
  const [isLoading, setIsLoading] = useState(true);
  const [selectedIdeaId, setSelectedIdeaId] = useState<string | null>(null);
  
  // State for idea editing
  const [editingIdeaId, setEditingIdeaId] = useState<string | null>(null);
  const [editedTitle, setEditedTitle] = useState("");
  const [editedDescription, setEditedDescription] = useState("");
  const [editedIsPublic, setEditedIsPublic] = useState(false);
  const [editedStatus, setEditedStatus] = useState("draft");
  const [editedTags, setEditedTags] = useState<string[]>([]);
  
  // State for checklist management
  const [ideaChecklists, setIdeaChecklists] = useState<Checklist[]>([]);
  const [isLoadingChecklists, setIsLoadingChecklists] = useState(false);
  const [isChecklistDialogOpen, setIsChecklistDialogOpen] = useState(false);
  const [newChecklistTitle, setNewChecklistTitle] = useState("");
  
  // State for posts
  const [posts, setPosts] = useState<Post[]>([]);
  const [myPosts, setMyPosts] = useState<Post[]>([]);
  const [isLoadingPosts, setIsLoadingPosts] = useState(false);
  
  // State for post editing
  const [editingPostId, setEditingPostId] = useState<string | null>(null);
  const [isEditingPost, setIsEditingPost] = useState(false);
  const [editedPostTitle, setEditedPostTitle] = useState("");
  const [editedPostContent, setEditedPostContent] = useState("");
  const [editedPostDescription, setEditedPostDescription] = useState("");
  const [editedPostIsPublic, setEditedPostIsPublic] = useState(true);
  const [editedPostTags, setEditedPostTags] = useState<string[]>([]);
  const [isUpdatingPost, setIsUpdatingPost] = useState(false);
  
  // State for new idea dialog
  const [isNewIdeaDialogOpen, setIsNewIdeaDialogOpen] = useState(false);
  const [newIdeaTitle, setNewIdeaTitle] = useState("");
  const [newIdeaDescription, setNewIdeaDescription] = useState("");
  const [newIdeaIsPublished, setNewIdeaIsPublished] = useState(false);
  const [newIdeaStatus, setNewIdeaStatus] = useState("draft");
  const [newIdeaTags, setNewIdeaTags] = useState<string[]>([]);
  const [isCreatingIdea, setIsCreatingIdea] = useState(false);
  
  // Get user
  const { user } = useUser();
  
  // ==== API Functions ====
  
  // Function to fetch ideas
  const fetchIdeas = async () => {
    try {
      setIsLoading(true);
      const response = await fetch('/api/ideas', {
        method: 'GET',
        headers: { 'Content-Type': 'application/json' },
        credentials: 'include'
      });
      
      const data = await response.json();
      
      if (response.ok) {
        setMyIdeas(data.myIdeas || []);
        setCollaboratedIdeas(data.collaboratedIdeas || []);
        setMyPicksIdeas(data.myPicksIdeas || []);
        
        // Select first idea by default if available
        if (data.myIdeas?.length > 0) {
          setSelectedIdeaId(data.myIdeas[0].id);
        }
      } else {
        toast({
          title: "Error",
          description: data.error || "Failed to fetch ideas",
          variant: "destructive"
        });
      }
    } catch (error) {
      console.error('Error fetching ideas:', error);
      toast({
        title: "Error",
        description: "An unexpected error occurred",
        variant: "destructive"
      });
    } finally {
      setIsLoading(false);
    }
  };
  
  // Function to fetch posts
  const fetchPosts = async () => {
    try {
      setIsLoadingPosts(true);
      const response = await fetch('/api/posts', {
        method: 'GET',
        headers: { 'Content-Type': 'application/json' },
        credentials: 'include'
      });
      
      if (response.ok) {
        const data = await response.json();
        setPosts(data.posts || []);
        
        // Filter my posts if user is logged in
        if (user?.id) {
          const userPosts = data.posts.filter((post: Post) => post.creator_id === user.id) || [];
          setMyPosts(userPosts);
        }
      } else {
        toast({
          title: "Error",
          description: "Failed to fetch posts",
          variant: "destructive"
        });
      }
    } catch (error) {
      console.error('Error fetching posts:', error);
    } finally {
      setIsLoadingPosts(false);
    }
  };
  
  // Function to fetch checklists for the selected idea
  const fetchChecklists = async () => {
    if (!selectedIdeaId) {
      setIdeaChecklists([]);
      return;
    }
    
    try {
      setIsLoadingChecklists(true);
      const response = await fetch(`/api/ideas/${selectedIdeaId}/checklists`);
      
      if (response.ok) {
        const data = await response.json();
        const allChecklists = [
          ...(data.personalChecklists || []),
          ...(data.sharedChecklists || [])
        ];
        setIdeaChecklists(allChecklists);
      } else {
        console.error("Failed to fetch checklists");
      }
    } catch (error) {
      console.error("Error fetching checklists:", error);
    } finally {
      setIsLoadingChecklists(false);
    }
  };
  
  // Update checklists when selected idea changes
  useEffect(() => {
    fetchChecklists();
  }, [selectedIdeaId]);
  
  // Fetch data on component mount
  useEffect(() => {
    fetchIdeas();
    fetchPosts();
  }, [user]);
  
  // ==== Handler Functions ====
  
  // Idea handlers
  const handleIdeaClick = (idea: Idea) => {
    setSelectedIdeaId(idea.id);
  };
  
  const handleCreateChecklist = async () => {
    if (!selectedIdeaId || !newChecklistTitle.trim()) return;
    
    try {
      const response = await fetch(`/api/ideas/${selectedIdeaId}/checklists`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          title: newChecklistTitle,
          isShared: true
        }),
      });
      
      if (response.ok) {
        const newChecklist = await response.json();
        setIdeaChecklists(prev => [...prev, newChecklist]);
        setNewChecklistTitle('');
        setIsChecklistDialogOpen(false);
        toast({ description: "Checklist created successfully" });
      } else {
        toast({
          title: "Error",
          description: "Failed to create checklist",
          variant: "destructive"
        });
      }
    } catch (error) {
      console.error('Error creating checklist:', error);
      toast({
        title: "Error",
        description: "An unexpected error occurred",
        variant: "destructive"
      });
    }
  };
  
  // Function for handling adding a checklist item
  const handleAddChecklistItem = async (checklistId: string, text: string) => {
    try {
      const response = await fetch(`/api/checklists/${checklistId}/items`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ text }),
      });
      
      if (response.ok) {
        const newItem = await response.json();
        setIdeaChecklists(prev => {
          const updatedChecklists = [...prev];
          const checklistIndex = updatedChecklists.findIndex(cl => cl.id === checklistId);
          
          if (checklistIndex !== -1) {
            updatedChecklists[checklistIndex] = {
              ...updatedChecklists[checklistIndex],
              checklist_items: [
                ...updatedChecklists[checklistIndex].checklist_items,
                newItem
              ]
            };
          }
          return updatedChecklists;
        });
      }
    } catch (error) {
      console.error('Error adding checklist item:', error);
      toast({
        title: "Error",
        description: "Failed to add item",
        variant: "destructive"
      });
    }
  };
  
  // Toggle checklist item completion
  const handleToggleChecklistItem = async (checklistId: string, itemId: string, completed: boolean) => {
    try {
      const response = await fetch(`/api/checklists/${checklistId}/items`, {
        method: 'PUT',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          itemId,
          completed: !completed
        }),
      });
      
      if (response.ok) {
        // Update the item in state
        setIdeaChecklists(prev => {
          const updatedChecklists = [...prev];
          const checklistIndex = updatedChecklists.findIndex(cl => cl.id === checklistId);
          
          if (checklistIndex !== -1) {
            const items = [...updatedChecklists[checklistIndex].checklist_items];
            const itemIndex = items.findIndex(item => item.id === itemId);
            
            if (itemIndex !== -1) {
              items[itemIndex] = {
                ...items[itemIndex],
                completed: !completed
              };
            }
            
            updatedChecklists[checklistIndex] = {
              ...updatedChecklists[checklistIndex],
              checklist_items: items
            };
          }
          return updatedChecklists;
        });
      }
    } catch (error) {
      console.error('Error toggling checklist item:', error);
    }
  };
  
  // Function to handle deleting a checklist item
  const handleDeleteChecklistItem = async (checklistId: string, itemId: string) => {
    try {
      const response = await fetch(`/api/checklists/${checklistId}/items/${itemId}`, {
        method: 'DELETE',
      });
      
      if (response.ok) {
        // Remove the item from state
        setIdeaChecklists(prev => {
          const updatedChecklists = [...prev];
          const checklistIndex = updatedChecklists.findIndex(cl => cl.id === checklistId);
          
          if (checklistIndex !== -1) {
            updatedChecklists[checklistIndex] = {
              ...updatedChecklists[checklistIndex],
              checklist_items: updatedChecklists[checklistIndex].checklist_items.filter(
                item => item.id !== itemId
              )
            };
          }
          return updatedChecklists;
        });
      }
    } catch (error) {
      console.error('Error deleting checklist item:', error);
      toast({
        title: "Error",
        description: "Failed to delete item",
        variant: "destructive"
      });
    }
  };
  
  // Function to handle deleting a checklist
  const handleDeleteChecklist = async (checklistId: string) => {
    try {
      const response = await fetch(`/api/checklists/${checklistId}`, {
        method: 'DELETE',
      });
      
      if (response.ok) {
        setIdeaChecklists(prev => prev.filter(cl => cl.id !== checklistId));
        toast({ description: "Checklist deleted successfully" });
      }
    } catch (error) {
      console.error('Error deleting checklist:', error);
      toast({
        title: "Error",
        description: "Failed to delete checklist",
        variant: "destructive"
      });
    }
  };
  
  // Post handlers
  const handleEditPost = (post: Post) => {
    setEditingPostId(post.id);
    setEditedPostTitle(post.title);
    setEditedPostContent(post.content);
    setEditedPostDescription(post.description || '');
    setEditedPostIsPublic(post.is_public ?? true);
    setEditedPostTags(post.tags || []);
    setIsEditingPost(true);
  };
  
  const handleCreateNewPost = () => {
    setEditingPostId(null);
    setEditedPostTitle('');
    setEditedPostContent('');
    setEditedPostDescription('');
    setEditedPostIsPublic(true);
    setEditedPostTags([]);
    setIsEditingPost(true);
  };
  
  const handleSavePost = async () => {
    try {
      setIsUpdatingPost(true);
      const isNewPost = !editingPostId;
      
      const url = isNewPost ? '/api/posts' : `/api/posts/${editingPostId}`;
      const method = isNewPost ? 'POST' : 'PUT';
      
      const response = await fetch(url, {
        method,
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          title: editedPostTitle,
          content: editedPostContent,
          description: editedPostDescription,
          is_public: editedPostIsPublic,
          tags: editedPostTags,
        }),
      });

      if (response.ok) {
        const updatedPost = await response.json();
        
        if (isNewPost) {
          setPosts(prev => [updatedPost, ...prev]);
          if (updatedPost.creator_id === user?.id) {
            setMyPosts(prev => [updatedPost, ...prev]);
          }
          toast({ description: "Post created successfully" });
        } else {
          setPosts(prev => prev.map(p => p.id === editingPostId ? updatedPost : p));
          if (updatedPost.creator_id === user?.id) {
            setMyPosts(prev => prev.map(p => p.id === editingPostId ? updatedPost : p));
          }
          toast({ description: "Post updated successfully" });
        }
        
        setIsEditingPost(false);
      } else {
        const error = await response.json();
        toast({
          title: "Error",
          description: error.message || "Failed to save post",
          variant: "destructive"
        });
      }
    } catch (error) {
      console.error('Error saving post:', error);
      toast({
        title: "Error",
        description: "An unexpected error occurred",
        variant: "destructive"
      });
    } finally {
      setIsUpdatingPost(false);
    }
  };
  
  // Find selected idea
  const selectedIdea = selectedIdeaId 
    ? [...myIdeas, ...collaboratedIdeas, ...myPicksIdeas].find(idea => idea.id === selectedIdeaId)
    : null;
  
  return (
    <MainLayout>
      <div className="container mx-auto p-4 space-y-6">
        <Tabs defaultValue="ideas" className="w-full">
          <TabsList className="mb-4">
            <TabsTrigger value="ideas">Ideas</TabsTrigger>
            <TabsTrigger value="posts">Posts</TabsTrigger>
          </TabsList>
          
          {/* Ideas Tab Content */}
          <TabsContent value="ideas" className="space-y-6">
            <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
              {/* Ideas List Section - 1/3 width on large screens */}
              <div className="lg:col-span-1">
                <Tabs defaultValue="my-ideas" className="w-full">
                  <TabsList className="w-full mb-4">
                    <TabsTrigger value="my-ideas" className="flex-1">My Ideas</TabsTrigger>
                    <TabsTrigger value="my-picks" className="flex-1">My Picks</TabsTrigger>
                    <TabsTrigger value="collaborated" className="flex-1">Collaborated</TabsTrigger>
                  </TabsList>
                  
                  <TabsContent value="my-ideas">
                    <IdeaList
                      ideas={myIdeas}
                      selectedIdeaId={selectedIdeaId}
                      onIdeaClick={handleIdeaClick}
                      onEditIdea={() => {}}
                      onPublishIdea={() => {}}
                      onNewIdeaClick={() => setIsNewIdeaDialogOpen(true)}
                    />
                  </TabsContent>
                  
                  <TabsContent value="my-picks">
                    <IdeaList
                      ideas={myPicksIdeas}
                      selectedIdeaId={selectedIdeaId}
                      onIdeaClick={handleIdeaClick}
                      onEditIdea={() => {}}
                      onPublishIdea={() => {}}
                      onNewIdeaClick={() => setIsNewIdeaDialogOpen(true)}
                    />
                  </TabsContent>
                  
                  <TabsContent value="collaborated">
                    <IdeaList
                      ideas={collaboratedIdeas}
                      selectedIdeaId={selectedIdeaId}
                      onIdeaClick={handleIdeaClick}
                      onEditIdea={() => {}}
                      onPublishIdea={() => {}}
                      onNewIdeaClick={() => setIsNewIdeaDialogOpen(true)}
                    />
                  </TabsContent>
                </Tabs>
              </div>
              
              {/* Idea Details Section - 2/3 width on large screens */}
              <div className="lg:col-span-2">
                <IdeaDetails
                  selectedIdea={selectedIdea}
                  checklists={ideaChecklists}
                  isLoadingChecklists={isLoadingChecklists}
                  onCreateChecklist={() => setIsChecklistDialogOpen(true)}
                  onAddChecklistItem={handleAddChecklistItem}
                  onToggleChecklistItem={handleToggleChecklistItem}
                  onDeleteChecklistItem={handleDeleteChecklistItem}
                  onDeleteChecklist={handleDeleteChecklist}
                />
              </div>
            </div>
          </TabsContent>
          
          {/* Posts Tab Content */}
          <TabsContent value="posts" className="space-y-6">
            <Tabs defaultValue="all-posts" className="w-full">
              <TabsList className="mb-4">
                <TabsTrigger value="all-posts">All Posts</TabsTrigger>
                <TabsTrigger value="my-posts">My Posts</TabsTrigger>
              </TabsList>
              
              <TabsContent value="all-posts">
                <PostList
                  posts={posts}
                  onEditPost={handleEditPost}
                  onCreatePost={handleCreateNewPost}
                />
              </TabsContent>
              
              <TabsContent value="my-posts">
                <PostList
                  posts={myPosts}
                  onEditPost={handleEditPost}
                  onCreatePost={handleCreateNewPost}
                  isMyPosts={true}
                />
              </TabsContent>
            </Tabs>
          </TabsContent>
        </Tabs>
        
        {/* Post Edit Dialog */}
        <PostDialog
          isOpen={isEditingPost}
          onOpenChange={setIsEditingPost}
          title={editedPostTitle}
          content={editedPostContent}
          description={editedPostDescription}
          isPublic={editedPostIsPublic}
          tags={editedPostTags}
          isProcessing={isUpdatingPost}
          onSave={handleSavePost}
          onCancel={() => setIsEditingPost(false)}
          onTitleChange={setEditedPostTitle}
          onContentChange={setEditedPostContent}
          onDescriptionChange={setEditedPostDescription}
          onIsPublicChange={setEditedPostIsPublic}
          onTagsChange={setEditedPostTags}
          dialogTitle={editingPostId ? "Edit Post" : "Create New Post"}
          dialogDescription={editingPostId 
            ? "Make changes to your post. Click save when you're done."
            : "Create a new post to share with the community."}
          saveButtonText={editingPostId ? "Save Changes" : "Create Post"}
        />
      </div>
    </MainLayout>
  );
};

export default DashboardPage;
